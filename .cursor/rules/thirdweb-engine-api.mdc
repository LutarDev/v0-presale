---
description: thirdweb Engine API Documentation
globs:
alwaysApply: true
---
# thirdweb Engine API Documentation

**Version:** 1.0.0

Engine is an open-source, backend server that reads, writes, and deploys contracts at production scale.

## Endpoints

### `GET` /json

**Responses:**
- **200**: Default Response

### `GET` /openapi.json

**Responses:**
- **200**: Default Response

### `GET` /json/

**Responses:**
- **200**: Default Response

### `POST` /backend-wallet/create

**Summary:** Create backend wallet

Create a backend wallet.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "label": {
              "type": "string"
            },
            "type": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "local"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "aws-kms"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "gcp-kms"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "smart:aws-kms"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "smart:gcp-kms"
                  ]
               
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `DELETE` /backend-wallet/{walletAddress}

**Summary:** Remove backend wallet

Remove an existing backend wallet. NOTE: This is an irreversible action for local wallets. Ensure any funds are transferred out before removing a local wallet.

**Parameters:**
- `walletAddress` (path): A contract or wallet address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/import

**Summary:** Import backend wallet

Import an existing wallet as a backend wallet.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "label": {
              "description": "Optional label for the imported wallet",
              "type": "string"
            }
          }
        },
        {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "awsKmsArn": {
                  "description": "AWS KMS key ARN",
                  "examples": [
                    "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012"
                  ],
                  "type": "string"
                },
                "credentials": {
                  "description": "Optional AWS credentials to use for importing the wallet, if not provided, the default AWS credentials will be used (if available).",
                  "type": "object",
                  "properties": {
                    "awsAccessKeyId": {
         
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/update

**Summary:** Update backend wallet

Update a backend wallet.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "walletAddress"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /backend-wallet/{chain}/{walletAddress}/get-balance

**Summary:** Get balance

Get the native balance for a backend wallet.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `walletAddress` (path): Backend wallet address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /backend-wallet/get-all

**Summary:** Get all backend wallets

Get all backend wallets.

**Parameters:**
- `page` (query): The page of wallets to get.
- `limit` (query): The number of wallets to get per page.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/transfer

**Summary:** Transfer tokens

Transfer native currency or ERC20 tokens to another wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "to": {
          "description": "The recipient wallet address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "currencyAddress": {
          "description": "The token address to transfer. Omit to transfer the chain's native currency (e.g. ETH on Ethereum).",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x0000000000000000000000000000000000000000"
        },
        "amount": {
          "description": "The amount in ether to transfer. Example: \"0.1\" to send 0.1 ETH.",
          "type": "string",
          "pattern": "^\\d+(\\.\\d+)?$",
          "example": "0.1"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/withdraw

**Summary:** Withdraw funds

Withdraw all funds from this wallet to another wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "toAddress": {
          "description": "Address to withdraw all funds to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "des
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/send-transaction

**Summary:** Send a transaction

Send a transaction with transaction parameters

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "toAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "data": {
          "type": "string",
          "example": "0x..."
        },
        "value": {
          "type": "string",
          "example": "10000000"
        },
        "authorizationList": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "address": {
                "description": "A contract or wallet address",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x000000000000000000000000000000000000dead"
              },
              "chainId": {
                "type": "integer"
              },
              "nonce": {
    
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/send-transaction-batch

**Summary:** Send a batch of raw transactions

Send a batch of raw transactions with transaction parameters

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "toAddress": {
            "description": "A contract or wallet address",
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x000000000000000000000000000000000000dead"
          },
          "data": {
            "type": "string",
            "example": "0x..."
          },
          "value": {
            "type": "string",
            "example": "10000000"
          },
          "txOverrides": {
            "type": "object",
            "properties": {
              "gas": {
                "type": "string",
                "pattern": "^\\d+$",
                "description": "Gas limit for the transaction",
                "example": "530000"
              },
              "gasPrice": {
                "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/send-transaction-batch-atomic

**Summary:** Send a batch of raw transactions atomically

Send a batch of raw transactions in a single UserOp. Transactions will be sent in-order and atomically. Can only be used with smart wallets.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "transactions": {
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "toAddress": {
                "description": "A contract or wallet address",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x000000000000000000000000000000000000dead"
              },
              "data": {
                "description": "A valid hex string",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]*$",
                "example": "0x68656c6c6f20776f726c64"
              },
              "value": {
                "description": "An amount in wei (no decimals). Example: \"50000000000\"",
                "type": "string",
                "pattern": "^\\d+$",
                "example": "50000000000"
              }
            },
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/sign-transaction

**Summary:** Sign a transaction

Sign a transaction

**Parameters:**
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "transaction": {
          "type": "object",
          "properties": {
            "to": {
              "type": "string"
            },
            "nonce": {
              "type": "string"
            },
            "gasLimit": {
              "type": "string"
            },
            "gasPrice": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "chainId": {
              "type": "integer"
            },
            "type": {
              "type": "integer"
            },
            "accessList": {},
            "maxFeePerGas": {
              "type": "string"
            },
            "maxPriorityFeePerGas": {
              "type": "string"
            },
            "ccipReadEnabled": {
              "type": "boolean"
            }
       
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/sign-message

**Summary:** Sign a message

Send a message

**Parameters:**
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "isBytes": {
          "type": "boolean"
        },
        "chainId": {
          "type": "number"
        }
      },
      "required": [
        "message"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/sign-typed-data

**Summary:** Sign an EIP-712 message

Send an EIP-712 message ("typed data")

**Parameters:**
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "domain": {
          "additionalProperties": true,
          "type": "object",
          "properties": {}
        },
        "types": {
          "additionalProperties": true,
          "type": "object",
          "properties": {}
        },
        "value": {
          "additionalProperties": true,
          "type": "object",
          "properties": {}
        },
        "primaryType": {
          "type": "string"
        },
        "chainId": {
          "type": "number"
        }
      },
      "required": [
        "domain",
        "types",
        "value"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /backend-wallet/{chain}/{walletAddress}/get-all-transactions

**Summary:** Get recent transactions

Get recent transactions for this backend wallet.

**Parameters:**
- `page` (query): Specify the page number.
- `limit` (query): Specify the number of results to return per page.
- `status` (query): The status to query: 'queued', 'mined', 'errored', or 'cancelled'. Default: 'queued'
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `walletAddress` (path): Backend wallet address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /backend-wallet/{chain}/{walletAddress}/get-transactions-by-nonce

**Summary:** Get recent transactions by nonce

Get recent transactions for this backend wallet, sorted by descending nonce.

**Parameters:**
- `fromNonce` (query): The earliest nonce, inclusive.
- `toNonce` (query): The latest nonce, inclusive. If omitted, queries up to the latest sent nonce.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `walletAddress` (path): Backend wallet address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/reset-nonces

**Summary:** Reset nonces

Reset nonces for all backend wallets. This is for debugging purposes and does not impact held tokens.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "chainId": {
          "description": "The chain ID to reset nonces for.",
          "type": "number"
        },
        "walletAddress": {
          "description": "The backend wallet address to reset nonces for. Omit to reset all backend wallets.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "syncOnchainNonces": {
          "description": "Resync nonces to match the onchain transaction count for your backend wallets. (Default: true)",
          "default": true,
          "type": "boolean"
        }
      },
      "required": [
        "syncOnchainNonces"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/cancel-nonces

**Summary:** Cancel nonces

Cancel all nonces up to the provided nonce. This is useful to unblock a backend wallet that has transactions waiting for nonces to be mined.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "toNonce": {
          "description": "The nonce to cancel up to, inclusive. Example: If the onchain nonce is 10 and 'toNonce' is 15, this request will cancel nonces: 11, 12, 13, 14, 15",
          "type": "number",
          "example": "42"
        }
      },
      "required": [
        "toNonce"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /backend-wallet/{chain}/{walletAddress}/get-nonce

**Summary:** Get nonce

Get the last used nonce for this backend wallet. This value managed by Engine may differ from the onchain value. Use `/backend-wallet/reset-nonces` if this value looks incorrect while idle.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `walletAddress` (path): Backend wallet address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /backend-wallet/{chain}/simulate-transaction

**Summary:** Simulate a transaction

Simulate a transaction with transaction parameters

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "toAddress": {
          "description": "The contract address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "value": {
          "description": "The amount of native currency in wei",
          "type": "string",
          "example": "0"
        },
        "functionName": {
          "description": "The function to call on the contract",
          "type": "string"
        },
        "args": {
          "description": "The arguments to call for this function",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "description": "String argument",
                "type": "string"
              },
              {
                "description": "Numeric argument",
                "type": "number"
              },
              {
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /wallet-credentials

**Summary:** Create wallet credentials

Create a new set of wallet credentials.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "circle"
          ]
        },
        "entitySecret": {
          "description": "32-byte hex string. Consult https://developers.circle.com/w3s/entity-secret-management to create and register an entity secret.",
          "pattern": "^[0-9a-fA-F]{64}$",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether this credential should be set as the default for its type. Only one credential can be default per type.",
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "label",
        "type",
        "entitySecret"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /wallet-credentials

**Summary:** Get all wallet credentials

Get all wallet credentials with pagination.

**Parameters:**
- `page` (query): Specify the page number.
- `limit` (query): Specify the number of results to return per page.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /wallet-credentials/{id}

**Summary:** Get wallet credential

Get a wallet credential by ID.

**Parameters:**
- `id` (path): The ID of the wallet credential to get.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `PUT` /wallet-credentials/{id}

**Summary:** Update wallet credential

Update a wallet credential's label, default status, and entity secret.

**Parameters:**
- `id` (path): The ID of the wallet credential to update.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "isDefault": {
          "description": "Whether this credential should be set as the default for its type. Only one credential can be default per type.",
          "type": "boolean"
        },
        "entitySecret": {
          "description": "32-byte hex string. Consult https://developers.circle.com/w3s/entity-secret-management to create and register an entity secret.",
          "pattern": "^[0-9a-fA-F]{64}$",
          "type": "string"
        }
      }
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/wallets

**Summary:** Get wallets configuration

Get wallets configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/wallets

**Summary:** Update wallets configuration

Update wallets configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "awsAccessKeyId": {
              "type": "string"
            },
            "awsSecretAccessKey": {
              "type": "string"
            },
            "awsRegion": {
              "type": "string"
            }
          },
          "required": [
            "awsAccessKeyId",
            "awsSecretAccessKey",
            "awsRegion"
          ]
        },
        {
          "type": "object",
          "properties": {
            "gcpApplicationProjectId": {
              "type": "string"
            },
            "gcpKmsLocationId": {
              "type": "string"
            },
            "gcpKmsKeyRingId": {
              "type": "string"
            },
            "gcpApplicationCredentialEmail": {
              "type": "string"
            },
            "gcpApplicationCredentialPrivateKey": {
              "type": "string"
           
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/chains

**Summary:** Get chain overrides configuration

Get chain overrides configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/chains

**Summary:** Update chain overrides configuration

Update chain overrides configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "chainOverrides": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Chain name",
                "type": "string"
              },
              "chain": {
                "description": "Chain name",
                "type": "string"
              },
              "rpc": {
                "type": "array",
                "items": {
                  "description": "RPC URL",
                  "type": "string"
                }
              },
              "nativeCurrency": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Native currency name",
                    "type": "string"
                  },
                  "symbol": {
                    "description": "Native currency symbol",
      
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/transactions

**Summary:** Get transaction processing configuration

Get transactions processing configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/transactions

**Summary:** Update transaction processing configuration

Update transaction processing configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "maxTxsToProcess": {
          "minimum": 1,
          "maximum": 10000,
          "type": "integer"
        },
        "maxTxsToUpdate": {
          "minimum": 1,
          "maximum": 10000,
          "type": "integer"
        },
        "minedTxListenerCronSchedule": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "retryTxListenerCronSchedule": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "minEllapsedBlocksBeforeRetry": {
          "minimum": 1,
          "maximum": 10000,
          "type": "integer"
        },
        "maxFeePerGasForRetries": {
          "type": "string"
        },
        "maxRetriesPerTx": {
          "minimum": 0,
         
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/auth

**Summary:** Get auth configuration

Get auth configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/auth

**Summary:** Update auth configuration

Update auth configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "authDomain": {
          "type": "string"
        },
        "mtlsCertificate": {
          "description": "Engine certificate used for outbound mTLS requests. Must provide the full certificate chain.",
          "type": "string"
        },
        "mtlsPrivateKey": {
          "description": "Engine private key used for outbound mTLS requests.",
          "type": "string"
        }
      }
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/backend-wallet-balance

**Summary:** Get wallet-balance configuration

Get wallet-balance configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/backend-wallet-balance

**Summary:** Update backend wallet balance configuration

Update backend wallet balance configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "minWalletBalance": {
          "description": "Minimum wallet balance in wei",
          "type": "string",
          "pattern": "^\\d+$",
          "example": "50000000000"
        }
      }
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/cors

**Summary:** Get CORS configuration

Get CORS configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/cors

**Summary:** Add a CORS URL

Add a URL to allow client-side calls to Engine

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "urlsToAdd": {
          "type": "array",
          "items": {
            "description": "Comma separated list of origins that will call Engine",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "required": [
        "urlsToAdd"
      ]
    },
    "example": {
      "urlsToAdd": [
        "https://example.com",
        "https://subdomain.example.com"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `DELETE` /configuration/cors

**Summary:** Remove CORS URLs

Remove URLs from CORS configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "urlsToRemove": {
          "type": "array",
          "items": {
            "description": "Comma separated list of origins to remove",
            "type": "string"
          }
        }
      },
      "required": [
        "urlsToRemove"
      ]
    },
    "example": {
      "urlsToRemove": [
        "https://example.com",
        "https://subdomain.example.com"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `PUT` /configuration/cors

**Summary:** Set CORS URLs

Replaces the CORS URLs to allow client-side calls to Engine

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "description": "Comma separated list of origins that will call Engine",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "required": [
        "urls"
      ]
    },
    "example": {
      "urls": [
        "https://example.com",
        "https://subdomain.example.com"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/cache

**Summary:** Get cache configuration

Get cache configuration

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/cache

**Summary:** Update cache configuration

Update cache configuration

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "clearCacheCronSchedule": {
          "description": "Cron expression for clearing cache. It should be in the format of 'ss mm hh * * *' where ss is seconds, mm is minutes and hh is hours. Seconds should not be '*' or less than 10",
          "default": "*/30 * * * * *",
          "type": "string"
        }
      },
      "required": [
        "clearCacheCronSchedule"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/contract-subscriptions

**Summary:** Get Contract Subscriptions configuration

Get the configuration for Contract Subscriptions

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /configuration/contract-subscriptions

**Summary:** Update Contract Subscriptions configuration

Update the configuration for Contract Subscriptions

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "maxBlocksToIndex": {
          "minimum": 1,
          "maximum": 100,
          "type": "integer"
        },
        "contractSubscriptionsRequeryDelaySeconds": {
          "description": "Requery after one or more delays. Use comma-separated positive integers. Example: \"2,10\" means requery after 2s and 10s.",
          "type": "string"
        }
      }
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /configuration/ip-allowlist

**Summary:** Get Allowed IP Addresses

Get the list of allowed IP addresses

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `PUT` /configuration/ip-allowlist

**Summary:** Set IP Allowlist

Replaces the IP Allowlist array to allow calls to Engine

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "ips": {
          "description": "Array of IP addresses to allowlist",
          "type": "array",
          "items": {
            "minLength": 7,
            "description": "IP address as a string",
            "type": "string"
          }
        }
      },
      "required": [
        "ips"
      ]
    },
    "example": {
      "ips": [
        "8.8.8.8",
        "172.217.255.255"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /webhooks/get-all

**Summary:** Get all webhooks configured

Get all webhooks configuration data set up on Engine

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /webhooks/create

**Summary:** Create webhook

Create a webhook to call when a specific Engine event occurs.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "url": {
          "description": "Webhook URL. Non-HTTPS URLs are not supported.",
          "type": "string",
          "example": "https://example.com/webhook"
        },
        "name": {
          "minLength": 3,
          "type": "string"
        },
        "eventType": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "queued_transaction"
              ]
            },
            {
              "type": "string",
              "enum": [
                "sent_transaction"
              ]
            },
            {
              "type": "string",
              "enum": [
                "mined_transaction"
              ]
            },
            {
              "type": "string",
              "enum": [
                "errored_transaction"
              ]
            },
            {
              "type": "string",
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /webhooks/revoke

**Summary:** Revoke webhook

Revoke a Webhook

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "id": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /webhooks/event-types

**Summary:** Get webhooks event types

Get the all the webhooks event types

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /webhooks/{webhookId}/test

**Summary:** Test webhook

Send a test payload to a webhook.

**Parameters:**
- `webhookId` (path): 

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /auth/permissions/get-all

**Summary:** Get all permissions

Get all users with their corresponding permissions

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/permissions/grant

**Summary:** Grant permissions to user

Grant permissions to a user

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "permissions": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "ADMIN"
              ]
            },
            {
              "type": "string",
              "enum": [
                "OWNER"
              ]
            }
          ]
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "walletAddress",
        "permissions"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/permissions/revoke

**Summary:** Revoke permissions from user

Revoke a user's permissions

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        }
      },
      "required": [
        "walletAddress"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /auth/access-tokens/get-all

**Summary:** Get all access tokens

Get all access tokens

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/access-tokens/create

**Summary:** Create a new access token

Create a new access token

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        }
      }
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/access-tokens/revoke

**Summary:** Revoke an access token

Revoke an access token

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/access-tokens/update

**Summary:** Update an access token

Update an access token

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /auth/keypair/get-all

**Summary:** List public keys

List the public keys configured with Engine

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/keypair/add

**Summary:** Add public key

Add the public key for a keypair

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "publicKey": {
          "description": "The public key of your keypair beginning with '-----BEGIN PUBLIC KEY-----'.",
          "type": "string"
        },
        "algorithm": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "RS256"
              ]
            },
            {
              "type": "string",
              "enum": [
                "RS384"
              ]
            },
            {
              "type": "string",
              "enum": [
                "RS512"
              ]
            },
            {
              "type": "string",
              "enum": [
                "ES256"
              ]
            },
            {
              "type": "string",
              "enum": [
                "ES384"
              ]
            },
            {
              "type": "string",
              "enum": [
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /auth/keypair/remove

**Summary:** Remove public key

Remove the public key for a keypair

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        }
      },
      "required": [
        "hash"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /chain/get

**Summary:** Get chain details

Get details about a chain.

**Parameters:**
- `chain` (query): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /chain/get-all

**Summary:** Get all chain details

Get details about all supported chains.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /relayer/get-all

**Summary:** Get all meta-transaction relayers

Get all meta-transaction relayers

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /relayer/create

**Summary:** Create a new meta-transaction relayer

Create a new meta-transaction relayer

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "chain": {
          "description": "A chain ID (\"137\") or slug (\"polygon-amoy-testnet\"). Chain ID is preferred.",
          "type": "string",
          "pattern": "^[\\w-]{1,50}$",
          "example": "80002"
        },
        "backendWalletAddress": {
          "description": "The address of the backend wallet to use for relaying transactions.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "allowedContracts": {
          "type": "array",
          "items": {
            "description": "A contract or wallet address",
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x000000000000000000000000000000000000dead"
          }
        },
        "allowedForwarders": {
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /relayer/revoke

**Summary:** Revoke a relayer

Revoke a relayer

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /relayer/update

**Summary:** Update a relayer

Update a relayer

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "chain": {
          "description": "A chain ID (\"137\") or slug (\"polygon-amoy-testnet\"). Chain ID is preferred.",
          "type": "string",
          "pattern": "^[\\w-]{1,50}$",
          "example": "80002"
        },
        "backendWalletAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "allowedContracts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedForwarders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /relayer/{relayerId}

**Summary:** Relay a meta-transaction

Relay an EIP-2771 meta-transaction

**Parameters:**
- `relayerId` (path): 

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "forward"
              ]
            },
            "request": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "string"
                },
                "to": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "gas": {
                  "type": "string"
                },
                "nonce": {
                  "type": "string"
                },
                "data": {
                  "type": "string"
                },
                "chainid": {
                  "type": "string"
                }
              },
              "required": [
                "from",
                "to",
   
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/read

**Summary:** Read from contract

Call a read function on a contract.

**Parameters:**
- `functionName` (query): The function to call on the contract. It is highly recommended to provide a full function signature, such as 'function balanceOf(address owner) view returns (uint256)', to avoid ambiguity and to skip ABI resolution
- `args` (query): Arguments for the function. Comma Separated
- `abi` (query): 
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/read-batch

**Summary:** Batch read from multiple contracts

Execute multiple contract read operations in a single call using Multicall

**Parameters:**
- `chain` (path): 

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "calls": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "contractAddress": {
                "type": "string"
              },
              "functionName": {
                "type": "string"
              },
              "functionAbi": {
                "type": "string"
              },
              "args": {
                "type": "array",
                "items": {}
              }
            },
            "required": [
              "contractAddress",
              "functionName"
            ]
          }
        },
        "multicallAddress": {
          "description": "Address of the multicall contract to use. If omitted, multicall3 contract will be used (0xcA11bde05977b3631167028862bE2a173976CA11).",
          "type": "string"
        }
      },
      "required": [
        "calls"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/write

**Summary:** Write to contract

Call a write function on a contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "functionName": {
          "description": "The function to call on the contract. It is highly recommended to provide a full function signature, such as \"function mintTo(address to, uint256 amount)\", to avoid ambiguity and to skip ABI resolution.",
          "type": "string",
          "example": "function mintTo(address to, uint256 amount)"
        },
        "args": {
          "description": "An array of arguments to provide the function. Supports: numbers, strings, arrays, objects. Do not provide: BigNumber, bigint, Date objects",
          "type": "array",
          "items": {},
          "example": [
            1730380951,
            "0x09530565aC1Ce08C3621f5B24Fca6d9a76574620",
            [
              "a",
              "b",
              "c"
            ]
          ]
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
```

**Responses:**
- **200**: Default Response

### `GET` /contract/{chain}/{contractAddress}/events/get-all

**Summary:** Get all events

Get a list of all blockchain events for this contract.

**Parameters:**
- `fromBlock` (query): 
- `toBlock` (query): 
- `order` (query): 
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/events/get

**Summary:** Get events

Get a list of specific blockchain events emitted from this contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "description": "Specify the from and to block numbers to get events for, defaults to all blocks",
      "type": "object",
      "properties": {
        "eventName": {
          "type": "string",
          "example": "Transfer"
        },
        "fromBlock": {
          "anyOf": [
            {
              "minimum": 0,
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "latest"
              ]
            },
            {
              "type": "string",
              "enum": [
                "earliest"
              ]
            },
            {
              "type": "string",
              "enum": [
                "pending"
              ]
            },
            {
              "type": "string",
              "enum": [
                "safe"
              ]
            },
            {
              "type": "string",
              "enum": [
      
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/metadata/abi

**Summary:** Get ABI

Get the ABI of a contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/metadata/events

**Summary:** Get events

Get details of all events implemented by a contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/metadata/extensions

**Summary:** Get extensions

Get all detected extensions for a contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/metadata/functions

**Summary:** Get functions

Get details of all functions implemented by the contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/roles/get

**Summary:** Get wallets for role

Get all wallets with a specific role for a contract.

**Parameters:**
- `role` (query): The role to list wallet members
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/roles/get-all

**Summary:** Get wallets for all roles

Get all wallets in each role for a contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/roles/grant

**Summary:** Grant role

Grant a role to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "role": {
          "description": "The role to grant",
          "type": "string"
        },
        "address": {
          "description": "The address to grant the role to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/roles/revoke

**Summary:** Revoke role

Revoke a role from a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "role": {
          "description": "The role to revoke",
          "type": "string"
        },
        "address": {
          "description": "The address to revoke the role from",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$"
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/royalties/get-default-royalty-info

**Summary:** Get royalty details

Gets the royalty recipient and BPS (basis points) of the smart contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/royalties/get-token-royalty-info/{tokenId}

**Summary:** Get token royalty details

Gets the royalty recipient and BPS (basis points) of a particular token in the contract.

**Parameters:**
- `tokenId` (path): 
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/royalties/set-default-royalty-info

**Summary:** Set royalty details

Set the royalty recipient and fee for the smart contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "seller_fee_basis_points": {
          "description": "The royalty fee in BPS (basis points). 100 = 1%.",
          "minimum": 0,
          "maximum": 10000,
          "type": "integer"
        },
        "fee_recipient": {
          "description": "The wallet address that will receive the royalty fees.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transact
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/royalties/set-token-royalty-info

**Summary:** Set token royalty details

Set the royalty recipient and fee for a particular token in the contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "seller_fee_basis_points": {
          "description": "The royalty fee in BPS (basis points). 100 = 1%.",
          "minimum": 0,
          "maximum": 10000,
          "type": "integer"
        },
        "fee_recipient": {
          "description": "The wallet address that will receive the royalty fees.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "token_id": {
          "description": "The token ID to set the royalty info for.",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/edition

**Summary:** Deploy Edition

Deploy an Edition contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "symbol": {
              "default": "",
              "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/edition-drop

**Summary:** Deploy Edition Drop

Deploy an Edition Drop contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "merkle": {
              "type": "object",
            
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/marketplace-v3

**Summary:** Deploy Marketplace

Deploy a Marketplace contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "platform_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "platform_fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "trusted_forwarders": {
              "defaul
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/multiwrap

**Summary:** Deploy Multiwrap

Deploy a Multiwrap contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "symbol": {
              "default": "",
              "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/nft-collection

**Summary:** Deploy NFT Collection

Deploy an NFT Collection contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "symbol": {
              "default": "",
              "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/nft-drop

**Summary:** Deploy NFT Drop

Deploy an NFT Drop contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "merkle": {
              "type": "object",
            
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/pack

**Summary:** Deploy Pack

Deploy a Pack contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "symbol": {
              "default": "",
              "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/signature-drop

**Summary:** Deploy Signature Drop

Deploy a Signature Drop contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "seller_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
              "type": "string"
            },
            "merkle": {
              "type": "object",
            
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/split

**Summary:** Deploy Split

Deploy a Split contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "recipients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "A contract or wallet address",
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x000000000000000000
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/token

**Summary:** Deploy Token

Deploy a Token contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "symbol": {
              "default": "",
              "type": "string"
            },
            "platform_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "platform_fee_recipient": {
              "default": "0x0000000000000000000000000000000000000000",
    
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/token-drop

**Summary:** Deploy Token Drop

Deploy a Token Drop contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "merkle": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "symbol": {
              "default": "",
              "type": "string"
            },
            "platform_fee_basis_points": {
              "maximum": 10000,
              "minimum": 0,
              "default": 0,
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/prebuilts/vote

**Summary:** Deploy Vote

Deploy a Vote contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractMetadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "external_link": {
              "type": "string"
            },
            "app_uri": {
              "type": "string"
            },
            "defaultAdmin": {
              "type": "string"
            },
            "voting_delay_in_blocks": {
              "minimum": 0,
              "default": 0,
              "type": "integer"
            },
            "voting_period_in_blocks": {
              "minimum": 1,
              "default": 1,
              "type": "integer"
            },
            "voting_token_address": {
              "description": "A contract or wallet address",
      
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /deploy/{chain}/{publisher}/{contractName}

**Summary:** Deploy published contract

Deploy a published contract to the blockchain.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `publisher` (path): Address or ENS of the publisher of the contract
- `contractName` (path): Name of the published contract to deploy
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the contract to deploy. Defaults to latest.",
          "type": "string"
        },
        "forceDirectDeploy": {
          "type": "boolean"
        },
        "saltForProxyDeploy": {
          "type": "string"
        },
        "compilerOptions": {
          "type": "object",
          "properties": {
            "compilerType": {
              "type": "string",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "solc"
                  ]
                },
                {
                  "type": "string",
                  "enum": [
                    "string"
                  ]
                }
              ],
              "enum": [
                "zksolc"
              ]
            },
            "compilerVersion": {
              "type": "string"
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /deploy/contract-types

**Summary:** Get contract types

Get all prebuilt contract types.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/get-all

**Summary:** Get all transactions

Get all transaction requests.

**Parameters:**
- `page` (query): Specify the page number.
- `limit` (query): Specify the number of results to return per page.
- `status` (query): The status to query: 'queued', 'mined', 'errored', or 'cancelled'. Default: 'queued'

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/status/{queueId}

**Summary:** Get transaction status

Get the status for a transaction request.

**Parameters:**
- `queueId` (path): Transaction queue ID

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/status

**Summary:** Get transaction status

Get the status for a transaction request.

**Parameters:**
- `queueId` (query): Transaction queue ID

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/get-all-deployed-contracts

**Summary:** Get all deployment transactions

Get all transaction requests to deploy contracts.

**Parameters:**
- `page` (query): Specify the page number for pagination.
- `limit` (query): Specify the number of transactions to return per page.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /transaction/sync-retry

**Summary:** Retry transaction (synchronous)

Retry a transaction with updated gas settings. Blocks until the transaction is mined or errors.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "queueId": {
          "description": "Transaction queue ID",
          "type": "string",
          "example": "9eb88b00-f04f-409b-9df7-7dcc9003bc35"
        },
        "maxFeePerGas": {
          "type": "string"
        },
        "maxPriorityFeePerGas": {
          "type": "string"
        }
      },
      "required": [
        "queueId"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /transaction/retry-failed

**Summary:** Retry failed transaction

Retry a failed transaction

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "queueId": {
          "description": "Transaction queue ID",
          "type": "string",
          "example": "9eb88b00-f04f-409b-9df7-7dcc9003bc35"
        }
      },
      "required": [
        "queueId"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /transaction/cancel

**Summary:** Cancel transaction

Attempt to cancel a transaction by sending a null transaction with a higher gas setting. This transaction is not guaranteed to be cancelled.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "queueId": {
          "description": "Transaction queue ID",
          "type": "string",
          "example": "9eb88b00-f04f-409b-9df7-7dcc9003bc35"
        }
      },
      "required": [
        "queueId"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /transaction/{chain}/send-signed-transaction

**Summary:** Send a signed transaction

Send a signed transaction

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "signedTransaction": {
          "type": "string"
        }
      },
      "required": [
        "signedTransaction"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /transaction/{chain}/send-signed-user-op

**Summary:** Send a signed user operation

Send a signed user operation

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "signedUserOp": {}
      },
      "required": [
        "signedUserOp"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/{chain}/tx-hash/{transactionHash}

**Summary:** Get transaction receipt

Get the transaction receipt from a transaction hash.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `transactionHash` (path): Transaction hash

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/{chain}/userop-hash/{userOpHash}

**Summary:** Get transaction receipt from user-op hash

Get the transaction receipt from a user-op hash.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `userOpHash` (path): User operation hash

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /transaction/logs

**Summary:** Get transaction logs

Get transaction logs for a mined transaction. A tranasction queue ID or hash must be provided. Set `parseLogs` to parse the event logs.

**Parameters:**
- `chain` (query): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `queueId` (query): The queue ID for a mined transaction.
- `transactionHash` (query): The transaction hash for a mined transaction.
- `parseLogs` (query): If true, parse the raw logs as events defined in the contract ABI. (Default: true)

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/account-factory/get-all-accounts

**Summary:** Get all smart accounts

Get all the smart accounts for this account factory.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/account-factory/get-associated-accounts

**Summary:** Get associated smart accounts

Get all the smart accounts for this account factory associated with the specific admin wallet.

**Parameters:**
- `signerAddress` (query): The address of the signer to get associated accounts from
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/account-factory/is-account-deployed

**Summary:** Check if deployed

Check if a smart account has been deployed to the blockchain.

**Parameters:**
- `adminAddress` (query): The address of the admin to check if the account address is deployed
- `extraData` (query): Extra data to use in predicting the account address
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/account-factory/predict-account-address

**Summary:** Predict smart account address

Get the counterfactual address of a smart account.

**Parameters:**
- `adminAddress` (query): The address of the admin to predict the account address for
- `extraData` (query): Extra data (account salt) to add to use in predicting the account address
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/account-factory/create-account

**Summary:** Create smart account

Create a smart account for this account factory.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "adminAddress": {
          "description": "The admin address to create an account for",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "extraData": {
          "description": "Extra data to add to use in creating the account address",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
          
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/account/admins/get-all

**Summary:** Get all admins

Get all admins for a smart account.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/account/sessions/get-all

**Summary:** Get all session keys

Get all session keys for a smart account.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/account/admins/grant

**Summary:** Grant admin

Grant a smart account's admin permission.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "signerAddress": {
          "description": "Address to grant admin permissions to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
         
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/account/admins/revoke

**Summary:** Revoke admin

Revoke a smart account's admin permission.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "description": "Address to revoke admin permissions from",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
      
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/account/sessions/create

**Summary:** Create session key

Create a session key for a smart account.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "signerAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "startDate": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "nativeTokenLimitPerTransaction": {
          "type": "string"
        },
        "approvedCallTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/account/sessions/revoke

**Summary:** Revoke session key

Revoke a session key for a smart account.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "walletAddress": {
          "description": "Address to revoke session from",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "d
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/account/sessions/update

**Summary:** Update session key

Update a session key for a smart account.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "signerAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "approvedCallTargets": {
          "type": "array",
          "items": {
            "description": "A contract or wallet address",
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x000000000000000000000000000000000000dead"
          }
        },
        "startDate": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "nativeTokenLimitPerTransaction": {
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/allowance-of

**Summary:** Get token allowance

Get the allowance of a specific wallet for an ERC-20 contract.

**Parameters:**
- `ownerWallet` (query): Address of the wallet who owns the funds
- `spenderWallet` (query): Address of the wallet to check token allowance
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/balance-of

**Summary:** Get token balance

Get the balance of a specific wallet address for this ERC-20 contract.

**Parameters:**
- `wallet_address` (query): Address of the wallet to check token balance
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/get

**Summary:** Get token details

Get details for this ERC-20 contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/total-supply

**Summary:** Get total supply

Get the total supply in circulation for this ERC-20 contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/signature/generate

**Summary:** Generate signature

Generate a signature granting access for another wallet to mint tokens from this ERC-20 contract. This method is typically called by the token contract owner.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.
- `x-thirdweb-sdk-version` (header): Override the thirdweb sdk version used. Example: "5" for v5 SDK compatibility.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "to": {
              "description": "The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves.",
              "type": "string"
            },
            "quantity": {
              "description": "The number of tokens this signature can be used to mint.",
              "type": "string"
            },
            "primarySaleRecipient": {
              "description": "If a price is specified, the funds will be sent to the primarySaleRecipient address. Defaults to the primarySaleRecipient address of the contract.",
              "type": "string"
            },
            "uid": {
              "description": "A unique identifier for the payload, used to prevent replay attacks and other types of exploits.\n      Note that the input value g
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/claim-conditions/can-claim

**Summary:** Check if tokens are available for claiming

Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.

**Parameters:**
- `quantity` (query): The amount of tokens to claim.
- `addressToCheck` (query): The wallet address to check if it can claim tokens. This considers all aspects of the active claim phase, including allowlists, previous claims, etc.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/claim-conditions/get-active

**Summary:** Retrieve the currently active claim phase, if any.

Retrieve the currently active claim phase, if any.

**Parameters:**
- `withAllowList` (query): Provide a boolean value to include the allowlist in the response.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/claim-conditions/get-all

**Summary:** Get all the claim phases configured.

Get all the claim phases configured on the drop contract.

**Parameters:**
- `withAllowList` (query): Provide a boolean value to include the allowlist in the response.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc20/claim-conditions/get-claim-ineligibility-reasons

**Summary:** Get claim ineligibility reasons

Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.

**Parameters:**
- `quantity` (query): The amount of tokens to claim.
- `addressToCheck` (query): The wallet address to check if it can claim tokens.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/claim-conditions/get-claimer-proofs

**Summary:** Get claimer proofs

Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.

**Parameters:**
- `walletAddress` (query): The wallet address to get the merkle proofs for.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/set-allowance

**Summary:** Set allowance

Grant a specific wallet address to transfer ERC-20 tokens from the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "spenderAddress": {
          "description": "Address of the wallet to allow transfers from",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "amount": {
          "description": "The number of tokens to give as allowance",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/transfer

**Summary:** Transfer tokens

Transfer ERC-20 tokens from the caller wallet to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "toAddress": {
          "description": "The recipient address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "amount": {
          "description": "The amount of tokens to transfer.",
          "type": "string",
          "pattern": "^\\d+(\\.\\d+)?$",
          "example": "0.1"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transa
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/transfer-from

**Summary:** Transfer tokens from wallet

Transfer ERC-20 tokens from the connected wallet to another wallet. Requires allowance.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "fromAddress": {
          "description": "The sender address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "toAddress": {
          "description": "The recipient address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "amount": {
          "description": "The amount of tokens to transfer.",
          "type": "string",
          "pattern": "^\\d+(\\.\\d+)?$",
          "example": "0.1"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },

```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/burn

**Summary:** Burn token

Burn ERC-20 tokens in the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "The amount of tokens you want to burn",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "description": "Maximum fee per gas",
              "type": "string",
              "pattern": "^\\d+$",
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/burn-from

**Summary:** Burn token from wallet

Burn ERC-20 tokens in a specific wallet. Requires allowance.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "holderAddress": {
          "description": "Address of the wallet sending the tokens",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "amount": {
          "description": "The amount of this token you want to burn",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/claim-to

**Summary:** Claim tokens to wallet

Claim ERC-20 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "recipient": {
          "description": "The wallet address to receive the claimed tokens.",
          "type": "string"
        },
        "amount": {
          "description": "The amount of tokens to claim.",
          "type": "string"
        },
        "singlePhaseDrop": {
          "description": "Whether the drop is a single phase drop",
          "type": "boolean"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
          
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/mint-batch-to

**Summary:** Mint tokens (batch)

Mint ERC-20 tokens to multiple wallets in one transaction.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "toAddress": {
                "description": "The address to mint tokens to",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x000000000000000000000000000000000000dead"
              },
              "amount": {
                "description": "The number of tokens to mint to the specific address.",
                "type": "string"
              }
            },
            "required": [
              "toAddress",
              "amount"
            ]
          }
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/mint-to

**Summary:** Mint tokens

Mint ERC-20 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC20 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "toAddress": {
          "description": "Address of the wallet to mint tokens to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "amount": {
          "description": "The amount of tokens you want to send",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
      
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/signature/mint

**Summary:** Signature mint

Mint ERC-20 tokens from a generated signature.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "properties": {
            "to": {
              "description": "The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves.",
              "type": "string"
            },
            "quantity": {
              "description": "The number of tokens this signature can be used to mint.",
              "type": "string"
            },
            "primarySaleRecipient": {
              "description": "If a price is specified, the funds will be sent to the primarySaleRecipient address. Defaults to the primarySaleRecipient address of the contract.",
              "type": "string"
            },
            "uid": {
              "description": "A unique identifier for the payload, used to prevent replay attacks and other types of expl
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/claim-conditions/set

**Summary:** Overwrite the claim conditions for the drop.

Overwrite the claim conditions for the drop. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "claimConditionInputs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "maxClaimableSupply": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "minimum": 0,
                    "type": "integer"
                  }
                ]
              },
              "startTime": {
                "anyOf": [
                  {
                    "format": "date-time",
                    "type": "string"
                  },
                  {
                    "minimum": 0,
                    "type": "integer"
                  }
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc20/claim-conditions/update

**Summary:** Update a single claim phase.

Update a single claim phase, by providing the index of the claim phase and the new phase configuration. The index is the position of the phase in the list of phases you have made, starting from zero. e.g. if you have two phases, the first phase has an index of 0 and the second phase has an index of 1. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "claimConditionInput": {
          "type": "object",
          "properties": {
            "maxClaimableSupply": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            },
            "startTime": {
              "anyOf": [
                {
                  "format": "date-time",
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            },
            "price": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "currencyAddress": {
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/get

**Summary:** Get details

Get the details for a token in an ERC-721 contract.

**Parameters:**
- `tokenId` (query): The tokenId of the NFT to retrieve
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/get-all

**Summary:** Get all details

Get details for all tokens in an ERC-721 contract.

**Parameters:**
- `start` (query): The start token id for paginated results. Defaults to 0.
- `count` (query): The page count for paginated results. Defaults to 100.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/get-owned

**Summary:** Get owned tokens

Get all tokens in an ERC-721 contract owned by a specific wallet.

**Parameters:**
- `walletAddress` (query): Address of the wallet to get NFTs for
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/balance-of

**Summary:** Get token balance

Get the balance of a specific wallet address for this ERC-721 contract.

**Parameters:**
- `walletAddress` (query): Address of the wallet to check NFT balance
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC721 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/is-approved

**Summary:** Check if approved transfers

Check if the specific wallet has approved transfers from a specific operator wallet.

**Parameters:**
- `ownerWallet` (query): Address of the wallet who owns the NFT
- `operator` (query): Address of the operator to check approval on
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/total-count

**Summary:** Get total supply

Get the total supply in circulation for this ERC-721 contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/total-claimed-supply

**Summary:** Get claimed supply

Get the claimed supply for this ERC-721 contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/total-unclaimed-supply

**Summary:** Get unclaimed supply

Get the unclaimed supply for this ERC-721 contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/claim-conditions/can-claim

**Summary:** Check if tokens are available for claiming

Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.

**Parameters:**
- `quantity` (query): The amount of tokens to claim.
- `addressToCheck` (query): The wallet address to check if it can claim tokens. This considers all aspects of the active claim phase, including allowlists, previous claims, etc.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/claim-conditions/get-active

**Summary:** Retrieve the currently active claim phase, if any.

Retrieve the currently active claim phase, if any.

**Parameters:**
- `withAllowList` (query): Provide a boolean value to include the allowlist in the response.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/claim-conditions/get-all

**Summary:** Get all the claim phases configured for the drop.

Get all the claim phases configured for the drop.

**Parameters:**
- `withAllowList` (query): Provide a boolean value to include the allowlist in the response.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/claim-conditions/get-claim-ineligibility-reasons

**Summary:** Get claim ineligibility reasons

Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.

**Parameters:**
- `quantity` (query): The amount of tokens to claim.
- `addressToCheck` (query): The wallet address to check if it can claim tokens.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc721/claim-conditions/get-claimer-proofs

**Summary:** Get claimer proofs

Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.

**Parameters:**
- `walletAddress` (query): The wallet address to get the merkle proofs for.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/set-approval-for-all

**Summary:** Set approval for all

Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "operator": {
          "description": "Address of the operator to give approval to",
          "type": "string"
        },
        "approved": {
          "description": "whether to approve or revoke approval",
          "type": "boolean"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePer
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/set-approval-for-token

**Summary:** Set approval for token

Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specific token.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "operator": {
          "description": "Address of the operator to give approval to",
          "type": "string"
        },
        "tokenId": {
          "description": "the tokenId to give approval for",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/transfer

**Summary:** Transfer token

Transfer an ERC-721 token from the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "to": {
          "description": "The recipient address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "type": "string",
          "pattern": "^\\d+$",
          "description": "The token ID to transfer.",
          "example": "42"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/transfer-from

**Summary:** Transfer token from wallet

Transfer an ERC-721 token from the connected wallet to another wallet. Requires allowance.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "from": {
          "description": "The sender address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "to": {
          "description": "The recipient address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "type": "string",
          "pattern": "^\\d+$",
          "description": "The token ID to transfer.",
          "example": "42"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
      
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/mint-to

**Summary:** Mint tokens

Mint ERC-721 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to mint the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "metadata": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the NFT",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "description": {
                  "description": "The description of the NFT",
                  "anyOf": [
                    {
       
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/mint-batch-to

**Summary:** Mint tokens (batch)

Mint ERC-721 tokens to multiple wallets in one transaction.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to mint the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "metadatas": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the NFT",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "description":
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/burn

**Summary:** Burn token

Burn ERC-721 tokens in the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "The token ID to burn",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "description": "Maximum fee per gas",
              "type": "string",
              "pattern": "^\\d+$",
              "example":
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/lazy-mint

**Summary:** Lazy mint

Lazy mint ERC-721 tokens to be claimed in the future.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "metadatas": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the NFT",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "description": "The description of the NFT",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
 
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/claim-to

**Summary:** Claim tokens to wallet

Claim ERC-721 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to claim the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "quantity": {
          "description": "Quantity of NFTs to mint",
          "type": "string"
        },
        "singlePhaseDrop": {
          "description": "Whether the drop is a single phase drop",
          "type": "boolean"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to 
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/signature/generate

**Summary:** Generate signature

Generate a signature granting access for another wallet to mint tokens from this ERC-721 contract. This method is typically called by the token contract owner.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC721 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.
- `x-thirdweb-sdk-version` (header): Override the thirdweb sdk version used. Example: "5" for v5 SDK compatibility.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "to": {
              "description": "The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves.",
              "examples": [
                "0x000000000000000000000000000000000000dead"
              ],
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "royaltyRecipient": {
              "description": "The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract.",
              "examples": [
                "0x000000000000000000000000000000000000dead"
              ],
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "quantity": {
              "examples": [
     
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/signature/mint

**Summary:** Signature mint

Mint ERC-721 tokens from a generated signature.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "payload": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                },
                "to": {
                  "description": "The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves.",
                  "type": "string"
                },
                "royaltyRecipient": {
                  "description": "The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract.",
                  "examples": [
                    "0x000000000000000000000000000000000000dead"
                  ],
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$"
                },
   
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/claim-conditions/set

**Summary:** Overwrite the claim conditions for the drop.

Overwrite the claim conditions for the drop. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "claimConditionInputs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "maxClaimableSupply": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "minimum": 0,
                    "type": "integer"
                  }
                ]
              },
              "startTime": {
                "anyOf": [
                  {
                    "format": "date-time",
                    "type": "string"
                  },
                  {
                    "minimum": 0,
                    "type": "integer"
                  }
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/claim-conditions/update

**Summary:** Update a single claim phase.

Update a single claim phase, by providing the index of the claim phase and the new phase configuration. The index is the position of the phase in the list of phases you have made, starting from zero. e.g. if you have two phases, the first phase has an index of 0 and the second phase has an index of 1. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "claimConditionInput": {
          "type": "object",
          "properties": {
            "maxClaimableSupply": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            },
            "startTime": {
              "anyOf": [
                {
                  "format": "date-time",
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            },
            "price": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "currencyAddress": {
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/signature/prepare

**Summary:** Prepare signature

Prepares a payload for a wallet to generate a signature.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC721 contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "metadata": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the NFT",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the NFT",
                  "type": "string"
                },
                "image": {
                  "description": "The image of the NFT",
                  "type": "string"
                },
                "animation_url": {
                  "description": "The animation url of the NFT",
                  "type": "string"
                },
                "external_url": {
                  "description": "The external url of the NFT",
                  "type": "string"
                },
   
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc721/token/update

**Summary:** Update token metadata

Update the metadata for an ERC721 token.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "Token ID to update metadata",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the NFT",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "description": "The description of the NFT",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "image": {
              "anyOf": [
                {
                  "type": "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/get

**Summary:** Get details

Get the details for a token in an ERC-1155 contract.

**Parameters:**
- `tokenId` (query): The tokenId of the NFT to retrieve
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/get-all

**Summary:** Get all details

Get details for all tokens in an ERC-1155 contract.

**Parameters:**
- `start` (query): The start token ID for paginated results. Defaults to 0.
- `count` (query): The page count for paginated results. Defaults to 100.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/get-owned

**Summary:** Get owned tokens

Get all tokens in an ERC-1155 contract owned by a specific wallet.

**Parameters:**
- `walletAddress` (query): Address of the wallet to get NFTs for
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/balance-of

**Summary:** Get balance

Get the balance of a specific wallet address for this ERC-1155 contract.

**Parameters:**
- `walletAddress` (query): Address of the wallet to check NFT balance
- `tokenId` (query): The tokenId of the NFT to check balance of
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/is-approved

**Summary:** Check if approved transfers

Check if the specific wallet has approved transfers from a specific operator wallet.

**Parameters:**
- `ownerWallet` (query): Address of the wallet who owns the NFT
- `operator` (query): Address of the operator to check approval on
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/total-count

**Summary:** Get total supply

Get the total supply in circulation for this ERC-1155 contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/total-supply

**Summary:** Get total supply

Get the total supply in circulation for this ERC-1155 contract.

**Parameters:**
- `tokenId` (query): The tokenId of the NFT to retrieve
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/signature/generate

**Summary:** Generate signature

Generate a signature granting access for another wallet to mint tokens from this ERC-1155 contract. This method is typically called by the token contract owner.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.
- `x-thirdweb-sdk-version` (header): Override the thirdweb sdk version used. Example: "5" for v5 SDK compatibility.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "to": {
              "description": "The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves.",
              "type": "string"
            },
            "quantity": {
              "description": "The number of tokens this signature can be used to mint.",
              "type": "string"
            },
            "metadata": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the NFT",
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/can-claim

**Summary:** Check if tokens are available for claiming

Check if tokens are currently available for claiming, optionally specifying if a specific wallet address can claim.

**Parameters:**
- `quantity` (query): The amount of tokens to claim.
- `tokenId` (query): The token ID of the NFT you want to claim.
- `addressToCheck` (query): The wallet address to check if it can claim tokens. This considers all aspects of the active claim phase, including allowlists, previous claims, etc.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-active

**Summary:** Get currently active claim phase for a specific token ID.

Retrieve the currently active claim phase for a specific token ID, if any.

**Parameters:**
- `tokenId` (query): The token ID of the NFT you want to claim.
- `withAllowList` (query): Provide a boolean value to include the allowlist in the response.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-all

**Summary:** Get all the claim phases configured for a specific token ID.

Get all the claim phases configured for a specific token ID.

**Parameters:**
- `tokenId` (query): The token ID of the NFT you want to get the claim conditions for.
- `withAllowList` (query): Provide a boolean value to include the allowlist in the response.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-claimer-proofs

**Summary:** Get claimer proofs

Returns allowlist information and merkle proofs for a given wallet address. Returns null if no proof is found for the given wallet address.

**Parameters:**
- `tokenId` (query): The token ID of the NFT you want to get the claimer proofs for.
- `walletAddress` (query): The wallet address to get the merkle proofs for.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/get-claim-ineligibility-reasons

**Summary:** Get claim ineligibility reasons

Get an array of reasons why a specific wallet address is not eligible to claim tokens, if any.

**Parameters:**
- `tokenId` (query): The token ID of the NFT you want to check if the wallet address can claim.
- `quantity` (query): The amount of tokens to claim.
- `addressToCheck` (query): The wallet address to check if it can claim tokens.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/airdrop

**Summary:** Airdrop tokens

Airdrop ERC-1155 tokens to specific wallets.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "Token ID of the NFT to airdrop",
          "type": "string"
        },
        "addresses": {
          "description": "Addresses and quantities to airdrop to",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "address": {
                "description": "A contract or wallet address",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x000000000000000000000000000000000000dead"
              },
              "quantity": {
                "default": "1",
                "type": "string"
              }
            },
            "required": [
              "address",
              "quantity"
            ]
          }
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": 
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/burn

**Summary:** Burn token

Burn ERC-1155 tokens in the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "The token ID to burn",
          "type": "string"
        },
        "amount": {
          "description": "The amount of tokens to burn",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "description":
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/burn-batch

**Summary:** Burn tokens (batch)

Burn a batch of ERC-1155 tokens in the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenIds": {
          "type": "array",
          "items": {
            "description": "The token IDs to burn",
            "type": "string"
          }
        },
        "amounts": {
          "type": "array",
          "items": {
            "description": "The amounts of tokens to burn",
            "type": "string"
          }
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/claim-to

**Summary:** Claim tokens to wallet

Claim ERC-1155 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to claim the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "description": "Token ID of the NFT to claim",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of NFTs to mint",
          "type": "string"
        },
        "singlePhaseDrop": {
          "description": "Whether the drop is a single phase drop",
          "type": "boolean"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
  
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/lazy-mint

**Summary:** Lazy mint

Lazy mint ERC-1155 tokens to be claimed in the future.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "metadatas": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the NFT",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "description": "The description of the NFT",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
 
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/mint-additional-supply-to

**Summary:** Mint additional supply

Mint additional supply of ERC-1155 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to mint the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "description": "Token ID to mint additional supply to",
          "type": "string"
        },
        "additionalSupply": {
          "description": "The amount of supply to mint",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to 
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/mint-batch-to

**Summary:** Mint tokens (batch)

Mint ERC-1155 tokens to multiple wallets in one transaction.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to mint the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "metadataWithSupply": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "metadata": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the NFT",
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/mint-to

**Summary:** Mint tokens

Mint ERC-1155 tokens to a specific wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "receiver": {
          "description": "Address of the wallet to mint the NFT to",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "metadataWithSupply": {
          "type": "object",
          "properties": {
            "metadata": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the NFT",
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "null"
                        }
                      ]
               
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/set-approval-for-all

**Summary:** Set approval for all

Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "operator": {
          "description": "Address of the operator to give approval to",
          "type": "string"
        },
        "approved": {
          "description": "whether to approve or revoke approval",
          "type": "boolean"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePer
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/transfer

**Summary:** Transfer token

Transfer an ERC-1155 token from the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "to": {
          "description": "The recipient address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "type": "string",
          "pattern": "^\\d+$",
          "description": "The token ID to transfer.",
          "example": "42"
        },
        "amount": {
          "type": "string",
          "pattern": "^\\d+$",
          "description": "The amount of tokens to transfer.",
          "example": "42"
        },
        "data": {
          "description": "A valid hex string",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]*$",
          "example": "0x68656c6c6f20776f726c64"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/transfer-from

**Summary:** Transfer token from wallet

Transfer an ERC-1155 token from the connected wallet to another wallet. Requires allowance.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): ERC1155 contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "from": {
          "description": "The sender address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "to": {
          "description": "The recipient address.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "type": "string",
          "pattern": "^\\d+$",
          "description": "The token ID to transfer.",
          "example": "42"
        },
        "amount": {
          "type": "string",
          "pattern": "^\\d+$",
          "description": "The amount of tokens to transfer.",
          "example": "42"
        },
        "data": {
          "description": "A valid hex string",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]*$"
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/signature/mint

**Summary:** Signature mint

Mint ERC-1155 tokens from a generated signature.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string"
            },
            "tokenId": {
              "type": "string"
            },
            "to": {
              "description": "The wallet address that can use this signature to mint tokens. This is to prevent another wallet from intercepting the signature and using it to mint tokens for themselves.",
              "type": "string"
            },
            "royaltyRecipient": {
              "description": "The address that will receive the royalty fees from secondary sales. Defaults to the royaltyRecipient address of the contract.",
              "type": "string"
            },
            "quantity": {
              "description": "The number of tokens this signature can be used to mint.",
              "type": "string"
            },
            "royaltyBps": {

```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/set

**Summary:** Overwrite the claim conditions for a specific token ID..

Overwrite the claim conditions for a specific token ID. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "ID of the token to set the claim conditions for",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ]
        },
        "claimConditionInputs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "maxClaimableSupply": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "minimum": 0,
                    "type": "integer"
                  }
                ]
              },
              "startTime": {
                "anyOf": [
                  {
                    "format": "date-time",
                    "type": "string"
                  },
                  {
                    "min
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/set-batch

**Summary:** Overwrite the claim conditions for a specific token ID..

Allows you to set claim conditions for multiple token IDs in a single transaction.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "claimConditionsForToken": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tokenId": {
                "description": "ID of the token to set the claim conditions for",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "claimConditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "maxClaimableSupply": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "minimum": 0,
                          "type": "int
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/claim-conditions/update

**Summary:** Update a single claim phase.

Update a single claim phase on a specific token ID, by providing the index of the claim phase and the new phase configuration.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "Token ID to update claim phase for",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ]
        },
        "claimConditionInput": {
          "type": "object",
          "properties": {
            "maxClaimableSupply": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            },
            "startTime": {
              "anyOf": [
                {
                  "format": "date-time",
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            },
         
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract/{chain}/{contractAddress}/erc1155/token/update

**Summary:** Update token metadata

Update the metadata for an ERC1155 token.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "Token ID to update metadata",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the NFT",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "description": "The description of the NFT",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "image": {
              "anyOf": [
                {
                  "type": "
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/direct-listings/get-all

**Summary:** Get all listings

Get all direct listings for this marketplace contract.

**Parameters:**
- `count` (query): Number of listings to fetch
- `seller` (query): Being sold by this Address
- `start` (query): Start from this index (pagination)
- `tokenContract` (query): Token contract address to show NFTs from
- `tokenId` (query): Only show NFTs with this ID
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/direct-listings/get-all-valid

**Summary:** Get all valid listings

Get all the valid direct listings for this marketplace contract. A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.

**Parameters:**
- `count` (query): Number of listings to fetch
- `seller` (query): Being sold by this Address
- `start` (query): Start from this index (pagination)
- `tokenContract` (query): Token contract address to show NFTs from
- `tokenId` (query): Only show NFTs with this ID
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/direct-listings/get-listing

**Summary:** Get direct listing

Gets a direct listing on this marketplace contract.

**Parameters:**
- `listingId` (query): The id of the listing to retrieve.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/direct-listings/is-buyer-approved-for-listing

**Summary:** Check approved buyer

Check if a buyer is approved to purchase a specific direct listing.

**Parameters:**
- `listingId` (query): The id of the listing to retrieve.
- `walletAddress` (query): The wallet address of the buyer to check.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/direct-listings/is-currency-approved-for-listing

**Summary:** Check approved currency

Check if a currency is approved for a specific direct listing.

**Parameters:**
- `listingId` (query): The id of the listing to retrieve.
- `currencyContractAddress` (query): The smart contract address of the ERC20 token to check.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/direct-listings/get-total-count

**Summary:** Transfer token from wallet

Get the total number of direct listings on this marketplace contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-all

**Summary:** Get all English auctions

Get all English auction listings on this marketplace contract.

**Parameters:**
- `count` (query): Number of listings to fetch
- `seller` (query): Being sold by this Address
- `start` (query): Start from this index (pagination)
- `tokenContract` (query): Token contract address to show NFTs from
- `tokenId` (query): Only show NFTs with this ID
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-all-valid

**Summary:** Get all valid English auctions

Get all valid English auction listings on this marketplace contract.

**Parameters:**
- `count` (query): Number of listings to fetch
- `seller` (query): Being sold by this Address
- `start` (query): Start from this index (pagination)
- `tokenContract` (query): Token contract address to show NFTs from
- `tokenId` (query): Only show NFTs with this ID
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-auction

**Summary:** Get English auction

Get a specific English auction listing on this marketplace contract.

**Parameters:**
- `listingId` (query): The id of the listing to retrieve.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-bid-buffer-bps

**Summary:** Get bid buffer BPS

Get the basis points of the bid buffer. 
This is the percentage higher that a new bid must be than the current highest bid in order to be placed. 
If there is no current bid, the bid must be at least the minimum bid amount.
Returns the value in percentage format, e.g. 100 = 1%.

**Parameters:**
- `listingId` (query): The id of the listing to retrieve.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-minimum-next-bid

**Summary:** Get minimum next bid

Helper function to calculate the value that the next bid must be in order to be accepted. 
If there is no current bid, the bid must be at least the minimum bid amount.
If there is a current bid, the bid must be at least the current bid amount + the bid buffer.

**Parameters:**
- `listingId` (query): The id of the listing to retrieve.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-winning-bid

**Summary:** Get winning bid

Get the current highest bid of an active auction.

**Parameters:**
- `listingId` (query): The ID of the listing to retrieve the winner for.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-total-count

**Summary:** Get total listings

Get the count of English auction listings on this marketplace contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/is-winning-bid

**Summary:** Check winning bid

Check if a bid is or will be the winning bid for an auction.

**Parameters:**
- `listingId` (query): The ID of the listing to retrieve the winner for.
- `bidAmount` (query): The amount of the bid to check if it is the winning bid.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/english-auctions/get-winner

**Summary:** Get winner

Get the winner of an English auction. Can only be called after the auction has ended.

**Parameters:**
- `listingId` (query): The ID of the listing to retrieve the winner for.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/offers/get-all

**Summary:** Get all offers

Get all offers on this marketplace contract.

**Parameters:**
- `count` (query): Number of listings to fetch
- `offeror` (query): has offers from this Address
- `start` (query): Start from this index (pagination)
- `tokenContract` (query): Token contract address to show NFTs from
- `tokenId` (query): Only show NFTs with this ID
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/offers/get-all-valid

**Summary:** Get all valid offers

Get all valid offers on this marketplace contract. Valid offers are offers that have not expired, been canceled, or been accepted.

**Parameters:**
- `count` (query): Number of listings to fetch
- `offeror` (query): has offers from this Address
- `start` (query): Start from this index (pagination)
- `tokenContract` (query): Token contract address to show NFTs from
- `tokenId` (query): Only show NFTs with this ID
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/offers/get-offer

**Summary:** Get offer

Get details about an offer.

**Parameters:**
- `offerId` (query): The ID of the offer to get information about.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /marketplace/{chain}/{contractAddress}/offers/get-total-count

**Summary:** Get total count

Get the total number of offers on this marketplace contract.

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/create-listing

**Summary:** Create direct listing

Create a direct listing on this marketplace contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "assetContractAddress": {
          "description": "The address of the asset being listed.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "description": "The ID of the token to list.",
          "type": "string"
        },
        "currencyContractAddress": {
          "description": "The address of the currency to accept for the listing.",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).",
          "type": "string"
        },
        "pricePerToken": {
          "description": "The price to pay per unit of NFTs listed.",
          "type": "string"
        },
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/update-listing

**Summary:** Update direct listing

Update a direct listing on this marketplace contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing you want to update.",
          "type": "string"
        },
        "assetContractAddress": {
          "description": "The address of the asset being listed.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "description": "The ID of the token to list.",
          "type": "string"
        },
        "currencyContractAddress": {
          "description": "The address of the currency to accept for the listing.",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).",
          "type": "string"
        },
   
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/buy-from-listing

**Summary:** Buy from direct listing

Buy from a specific direct listing from this marketplace contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing you want to approve a buyer for.",
          "type": "string"
        },
        "quantity": {
          "description": "The number of tokens to buy (default is 1 for ERC721 NFTs).",
          "type": "string"
        },
        "buyer": {
          "description": "The wallet address of the buyer.",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transact
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/approve-buyer-for-reserved-listing

**Summary:** Approve buyer for reserved listing

Approve a wallet address to buy from a reserved listing.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing you want to approve a buyer for.",
          "type": "string"
        },
        "buyer": {
          "description": "The wallet address of the buyer to approve.",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
        
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/revoke-buyer-approval-for-reserved-listing

**Summary:** Revoke approval for reserved listings

Revoke approval for a buyer to purchase a reserved listing.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing you want to approve a buyer for.",
          "type": "string"
        },
        "buyerAddress": {
          "description": "The wallet address of the buyer to approve.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
           
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/revoke-currency-approval-for-listing

**Summary:** Revoke currency approval for reserved listing

Revoke approval of a currency for a reserved listing.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing you want to approve a buyer for.",
          "type": "string"
        },
        "currencyContractAddress": {
          "description": "The wallet address of the buyer to approve.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",

```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/direct-listings/cancel-listing

**Summary:** Cancel direct listing

Cancel a direct listing from this marketplace contract. Only the creator of the listing can cancel it.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing you want to cancel.",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "description": "Maximum fee per gas",
              "type": "string",
              "pattern": "^\\d+$",
 
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/buyout-auction

**Summary:** Buyout English auction

Buyout the listing for this auction.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing to buy NFT(s) from.",
          "type": "string"
        }
      },
      "required": [
        "listingId"
      ]
    },
    "example": {
      "listingId": "0"
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/cancel-auction

**Summary:** Cancel English auction

Cancel an existing auction listing. Only the creator of the listing can cancel it. Auctions cannot be canceled once a bid has been made.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing to cancel auction.",
          "type": "string"
        }
      },
      "required": [
        "listingId"
      ]
    },
    "example": {
      "listingId": "0"
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/create-auction

**Summary:** Create English auction

Create an English auction listing on this marketplace contract.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "assetContractAddress": {
          "description": "The address of the asset being listed.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "description": "The ID of the token to list.",
          "type": "string"
        },
        "currencyContractAddress": {
          "description": "The address of the currency to accept for the listing.",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).",
          "type": "string"
        },
        "startTimestamp": {
          "description": "The start time of the listing. If not set, defaults to now.",
          "minimum
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/close-auction-for-bidder

**Summary:** Close English auction for bidder

After an auction has concluded (and a buyout did not occur),
execute the sale for the buyer, meaning the buyer receives the NFT(s). 
You must also call closeAuctionForSeller to execute the sale for the seller,
meaning the seller receives the payment from the highest bid.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing to execute the sale for.",
          "type": "string"
        }
      },
      "required": [
        "listingId"
      ]
    },
    "example": {
      "listingId": "0"
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/close-auction-for-seller

**Summary:** Close English auction for seller

After an auction has concluded (and a buyout did not occur),
execute the sale for the seller, meaning the seller receives the payment from the highest bid.
You must also call closeAuctionForBidder to execute the sale for the buyer, meaning the buyer receives the NFT(s).

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing to execute the sale for.",
          "type": "string"
        }
      },
      "required": [
        "listingId"
      ]
    },
    "example": {
      "listingId": "0"
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/execute-sale

**Summary:** Execute sale

Close the auction for both buyer and seller.
This means the NFT(s) will be transferred to the buyer and the seller will receive the funds.
This function can only be called after the auction has ended.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing to execute the sale for.",
          "type": "string"
        }
      },
      "required": [
        "listingId"
      ]
    },
    "example": {
      "listingId": "0"
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/english-auctions/make-bid

**Summary:** Make bid

Place a bid on an English auction listing.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "listingId": {
          "description": "The ID of the listing to place a bid on.",
          "type": "string"
        },
        "bidAmount": {
          "description": "The amount of the bid to place in the currency of the listing. Use getNextBidAmount to get the minimum amount for the next bid.",
          "type": "string"
        }
      },
      "required": [
        "listingId",
        "bidAmount"
      ]
    },
    "example": {
      "listingId": "0",
      "bidAmount": "0.00000001"
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/offers/make-offer

**Summary:** Make offer

Make an offer on a token. A valid listing is not required.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "assetContractAddress": {
          "description": "The address of the asset being listed.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "tokenId": {
          "description": "The ID of the token to list.",
          "type": "string"
        },
        "currencyContractAddress": {
          "description": "The address of the currency to accept for the listing.",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of tokens to include in the listing. NOTE: For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).",
          "type": "string"
        },
        "totalPrice": {
          "description": "the price to offer in the currency specified",
          "type": "string"
        },
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/offers/cancel-offer

**Summary:** Cancel offer

Cancel a valid offer made by the caller wallet.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "offerId": {
          "description": "The ID of the offer to cancel. You can view all offers with getAll or getAllValid.",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "description": "Maximum fee per gas",
              "type": "string
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /marketplace/{chain}/{contractAddress}/offers/accept-offer

**Summary:** Accept offer

Accept a valid offer.

**Parameters:**
- `simulateTx` (query): Simulates the transaction before adding it to the queue, returning an error if it fails simulation. Note: This step is less performant and recommended only for debugging purposes.
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address
- `x-backend-wallet-address` (header): Backend wallet address
- `x-idempotency-key` (header): Transactions submitted with the same idempotency key will be de-duplicated. Only the last 100000 transactions are compared.
- `x-transaction-mode` (header): Transaction mode to use for EOA transactions. Will be ignored if using a smart wallet. If omitted, defaults to regular EOA transactions.
- `x-account-address` (header): Smart account address
- `x-account-factory-address` (header): Smart account factory address. If omitted, Engine will try to resolve it from the contract.
- `x-account-salt` (header): Smart account salt as string or hex. This is used to predict the smart account address. Useful when creating multiple accounts with the same admin and only needed when deploying the account as part of a userop.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "offerId": {
          "description": "The ID of the offer to accept. You can view all offers with getAll or getAllValid.",
          "type": "string"
        },
        "txOverrides": {
          "type": "object",
          "properties": {
            "gas": {
              "type": "string",
              "pattern": "^\\d+$",
              "description": "Gas limit for the transaction",
              "example": "530000"
            },
            "gasPrice": {
              "description": "Gas price for the transaction. Do not use this if maxFeePerGas is set or if you want to use EIP-1559 type transactions. Only use this if you want to use legacy transactions.",
              "type": "string",
              "pattern": "^\\d+$",
              "example": "50000000000"
            },
            "maxFeePerGas": {
              "description": "Maximum fee per gas",
              "type": "string
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract-subscriptions/get-all

**Summary:** Get contract subscriptions

Get all contract subscriptions.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract-subscriptions/add

**Summary:** Add contract subscription

Subscribe to event logs and transaction receipts for a contract.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "chain": {
          "description": "A chain ID (\"137\") or slug (\"polygon-amoy-testnet\"). Chain ID is preferred.",
          "type": "string",
          "pattern": "^[\\w-]{1,50}$",
          "example": "80002"
        },
        "contractAddress": {
          "description": "The address for the contract.",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "webhookId": {
          "description": "The ID of an existing webhook to use for this contract subscription. Either `webhookId` or `webhookUrl` must be provided.",
          "type": "number",
          "example": 1
        },
        "webhookUrl": {
          "description": "Creates a new webhook to call when new onchain data is detected. Either `webhookId` or `webhookUrl` must be provided.",
          "type": "string",
         
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /contract-subscriptions/remove

**Summary:** Remove contract subscription

Remove an existing contract subscription

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "contractSubscriptionId": {
          "description": "The ID for an existing contract subscription.",
          "type": "string"
        }
      },
      "required": [
        "contractSubscriptionId"
      ]
    }
  }
}
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract/{chain}/{contractAddress}/subscriptions/get-indexed-blocks

**Summary:** Get subscribed contract indexed block range

Gets the subscribed contract's indexed block range

**Parameters:**
- `chain` (path): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.
- `contractAddress` (path): Contract address

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /contract-subscriptions/last-block

**Summary:** Get last processed block

Get the last processed block for a chain.

**Parameters:**
- `chain` (query): A chain ID ("137") or slug ("polygon-amoy-testnet"). Chain ID is preferred.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `GET` /wallet-subscriptions/get-all

**Summary:** Get wallet subscriptions

Get all wallet subscriptions.

**Parameters:**
- `page` (path): Specify the page number.
- `limit` (path): Specify the number of results to return per page.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /wallet-subscriptions

**Summary:** Add wallet subscription

Subscribe to wallet conditions.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "chain": {
              "description": "A chain ID (\"137\") or slug (\"polygon-amoy-testnet\"). Chain ID is preferred.",
              "examples": [
                "80002"
              ],
              "type": "string",
              "pattern": "^[\\w-]{1,50}$"
            },
            "walletAddress": {
              "description": "A contract or wallet address",
              "examples": [
                "0x000000000000000000000000000000000000dead"
              ],
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "conditions": {
              "maxItems": 100,
              "description": "Array of conditions to monitor for this wallet",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "object",
             
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `POST` /wallet-subscriptions/{subscriptionId}

**Summary:** Update wallet subscription

Update an existing wallet subscription.

**Parameters:**
- `subscriptionId` (path): The ID of the wallet subscription to update.

**Request Body:**
```json
{
  "application/json": {
    "schema": {
      "type": "object",
      "properties": {
        "chain": {
          "description": "A chain ID (\"137\") or slug (\"polygon-amoy-testnet\"). Chain ID is preferred.",
          "type": "string",
          "pattern": "^[\\w-]{1,50}$",
          "example": "80002"
        },
        "walletAddress": {
          "description": "A contract or wallet address",
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x000000000000000000000000000000000000dead"
        },
        "conditions": {
          "maxItems": 100,
          "description": "Array of conditions to monitor for this wallet",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "token_balance_lt"
                    ]
       
```

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error

### `DELETE` /wallet-subscriptions/{subscriptionId}

**Summary:** Delete wallet subscription

Delete an existing wallet subscription.

**Parameters:**
- `subscriptionId` (path): The ID of the wallet subscription to update.

**Responses:**
- **200**: Default Response
- **400**: Bad Request
- **404**: Not Found
- **500**: Internal Server Error
